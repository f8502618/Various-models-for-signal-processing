function [pressure,t]  = comp_press_field_point_source(x,x_s,y,y_s,z,z_s,p_0,c,upper_t,lower_t,dt,t_end,inx)


% ******** Introduction to this function ********
%
% pressure  = comp_press_field_point_source(x,x_s,y,y_s,z,z_s,p_0,c,t) 
%
% This function calculates the pressure field p at the position (x,y,z) 
% generated by a acoustic point source (xs,ys,zs) for a given intial
% pressure p_0, speed of sound c and time t.
% 
% INPUTS: 
% x or x_s : a 1D array which represents the position of the acoustic
% pressure field or the position of the acoustic point source in the
% x-axis,[mm]
%
% y or y_s: a 1D array which represents the position of the acoustic
% pressure field or the position of the acoustic point source in the y-axis
% [mm]
%
% z or z_s: a 1D array which represents the position of the acoustic
% pressure field or the position of the acoustic point source in the z-axis
% [mm]
%
% p_0: the initial acoustic pressure amplitude [Pa¡¤m]
%
% c: the speed of acoustic sound [m/s]
%
% t: time taken for the pressure field to travel [¦Ìs]
%
% inx: the index where the time the user wants to terminate.
%
% OUTPUTS: 
%
% p: the spacial(x,y,z,t) and time dependent pressure field [Pa]
% 
% As the pressure field is inversely proportional to the
% distance between each grid point and the point source,R, so both the grid
% point coordinate (x,y,z) and the point source coordinate(x_s,y_s,z_s) are
% calculated to form a resultant R to indicate the spatial position of the
% pressure field.Loop through x,y,z spatial points and the
% varing time,the delta value and the pressure value at all spatial grid 
% points with the time range interested will be found. The pressure values
% are found according to the pressure function:
% p(x,y,z,t) = p_0 * (delta(t-r/c)/4 * pi *r), 
% 
% NOTE - this function has been implemented using some vectorisation to
% remove the loops over all coordinates


% ******** Time range: ********
% As pressure and time are the final output we want to know,and pressure is 
% dependent on time, so we define the time range
t = lower_t:dt:upper_t;


% ******** ERROR CHECKING: ********
% Check wether the input value is numeric and real, also check the size of 
% will be displayed as errors.

if ~isnumeric([x,x_s,y,y_s,z,z_s,p_0,c,upper_t,lower_t,dt,t_end,inx]) || ~isreal([x,x_s,y,y_s,z,z_s,p_0,c,upper_t,lower_t,dt,t_end,inx])
    error('Input [x,x_s,y,y_s,z,z_s,p_0,c,upper_t,lower_t,dt,t_end,inx] is expected to be numeric and real-valued');
end

if length(size(t))~= 2
    error('Input time t is expected to be a 2D array');
end

% Only if all the above test passed successfully, execute remainder.

%******** Computation of pressure: ********

% The following vectorisd quantities [X,Y,Z] and [X_s,Y_s,Z_s] represent 
% the position of the acoustic pressure field and the position of the
% acoustic point source respectively. The distance between each grid point
% and the point source, R, is also computed.

% Return 3-D grid coordinates defined by the vectors xcoors, ycoors, and 
% zcoors.The grid represented by X, Y, and Z has 
% size length(y)-by-length(x)-by-length(z).
[X,Y,Z] = meshgrid(x,y,z);

% Return 3-D grid coordinates defined
% by the source vectors x0,y0 and z0, with grid dimensions length(x0)*
% length(y0) * length(z0).
[X_s,Y_s,Z_s] = meshgrid(x_s,y_s,z_s);

% R is the distance between each grid point and the point source
R = sqrt((X-X_s).^2 + (Y-Y_s).^2 +(Z-Z_s).^2);

% add eps to avoid nan
R = R + eps;

% a is defined as the arrival time of the pressure pulse at the point
% interested
arrival_t = R./c;

% Return the number of time steps
Numt = length(t);

% Find the index of the arrival point, arriving time/time step size = no of
% time steps taken for the impulse to arrive
t_index = round(arrival_t./dt);

% Define the number of steps taken along x,y and z direction,
% (Numx,Numy,Numz)
Numx = length(X);

Numy = length(Y);

Numz = 1;

% Preallocate storage for delta(Nx,Ny,Nz,Nt)
delta_t = zeros(Numx,Numy, Numz,Numt);

% Preallocate storage for pressure(Nx,Ny,Nz,Nt)
pressure = zeros(Numx,Numy,Numz, Numt);

% The below loop returns the delta value and the pressure value at 
% (xn,yn,zn,tn), where cnt is to count the number of steps runned through 
% the whole length in each spatial direction and time.
% When the time euqals to the arrival time,t== R/c, delta(t-R/c)
% will equal to 1, due to the property of dirac function.
for xcnt = 1:Numx
    
    for ycnt = 1:Numy
        
        for tcnt = 1:Numt
            
            % As our index starts from 1, so +1
            if tcnt == t_index(xcnt,ycnt) +1
                
                % At t - R/c == 0, assign delta(t -R/c) == 1
                delta_t(xcnt,ycnt,1,tcnt) = 1;
                
            end
            
            % Compute presssure values
            pressure(xcnt,ycnt,1,tcnt) = ((p_0./(4*pi*(c*t(tcnt)+eps))) .* delta_t(xcnt,ycnt,1,tcnt));            
            
        end
    end
end

end