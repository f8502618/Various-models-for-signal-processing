% ******** Introduction: ********
%
% This script performs the simulation to acoustic sources of finite
% dimensions.According to Huygen's principle,any wave front can be treated
% as an infinite collection of infinitesimally small point sources.Hence,
% the field generated by an acoustic source of finite spatial extent as the
% sum of a finite collection of point sources, can be approximated.These
% point sources shall be spaced sufficiently close to avoid spatial
% aliasing.
% This script models an acoustic line source located at
% (|x| <= 0.5 mm, y = z = 0) as a collection of point sources.The pressure
% field at each individual point was firstly computed, then they were
% summed up to give a total pressure value along the line source, total_p,
% by using a loop. Then, Gaussian tone burst was applied, to give
% the pressure generated by an excitation signal of finite temporal
% duration,s_conver. Finally, the resulting total_p and s_conver values
% were plotted across xy plane at t = 1 milisecond.


% ******** Clear Space: ********

% Starts timing
tic;

% Clear all contents from command window
clc;

% Clear all variables from workspace
clear;

% Close all figures
close all;


% ******** Computation of total pressure along the line source: ********
% Pressure field at acoustic pressure source point(x0,y0,z0) = (0.005:0.005,0,0),
% hence define (x0, y0, z0) position in unit of m. dx0 is the step
% increament from the lower limit to the upper limit of grid point in x0,x
% and y.
lower_x0 = -0.0005;

upper_x0 = 0.0005;

ds = 5.0e-05;

y0 = 0;

z0 = 0;

x_s = lower_x0:ds:upper_x0;

y_s = y0;

z_s = z0;

% Numx0 return the total step number of x_s increament
Numx0 = length(x_s);

% The pressure generated varies across the x-axis and the y-axis, and
% maintains at z = 0 at the z-direction.
% In the spatial grid, -3 mm <= x <= +3 mm,-3 mm <= y <= +3 mm, hence we
% define the x and y position in unit of m.

xcoors = -0.002: ds : 0.002;

ycoors = 0: ds : 0.004;

zcoors = 0;

x = xcoors;
y = ycoors;
z = zcoors;

% We use sound speed c = 1500 m/s to simulate water or soft biological
%tissue
c = 1500;

% We use the initial pressure amplitude p_0 = 1 Pa.m
p_0 = 1;

% Pressure varys as a function of time, and the time range is
% 0<= t <= 3 miliseconds with a temporal step size ?t = 10 ns.
% So define time t in unit of seconds. Numx,Numy,Numz return the spatial
% step size in x,y,z direction, and Numt is the total number of temporal
% steps.

dt = 1.0000e-08;

upper_t = 4.0000e-06;

lower_t = 0;

t = lower_t:dt:upper_t;

Numx = length(xcoors);

Numy = length(ycoors);

Numz = length(zcoors);

Numt = length(t);

% Define the time the user wish to terminate
t_end = 1.0000e-06;
% Find the index of the time the user wish to terminate
inx = find(t == t_end);

% Preallocate storage for the total pressure which induces the change in
% x_0, as now the x_0 values become an array
total_p = zeros(Numx,Numy,Numz, Numt);

% Compute pressure at every x_0 value in the x_0 array, then sum up all
% the new pressures.
for xscnt = 1: Numx0
    
    x_s0 = x_s(xscnt);
    
    [pressure,t]  = comp_press_field_point_source(x,x_s0,y,y_s,z,z_s,p_0,c,upper_t,lower_t,dt,t_end,inx);
    
    total_p = total_p + pressure;
    
end


% ******** Plot of total pressure along the line source: ********

% Divide the figure into an 2-by-2 grid and creates axes in the position
% specified by 1.
subplot(2,2,1);

% Plot the presseure with a time up to inx, and x is (-3:10e-3:3)mm and
% y is (-3:10e-3:3)mm
imagesc(x*1000,y*1000,total_p(:,:,1,inx));

% Adjust the xy ratio
daspect([Numx,Numy,Numz]);

% Set up the colormap
colormap hot;

colorbar;

caxis([-60,60]);

% label the x-axis
xlabel('x [mm]');

% label the y-axis
ylabel('y [mm]');

% giving a title on the figure
title('Impulse response in xy plane, as t = 1 us.');


% ******** Computation of Gaussian tone burtst along the line source: *****

% We define the standard deviation sigma as:
sigma = 5.0000e-08;

% f_0 is the centre frequency which is a measure of a central frequency
% between the upper and lower cutoff frequencies, with a unit, [Hz].

% We define the centre frequency, f_0, as:
f_0 = 1.0000e07;

% Gaussian tone burst has a finite duration(-4*sigma<= t <= +4*sigma) in
%time, so we defien the lower time limit of the Gaussian tone burst as
% lower_tG and the uppere time limit of the Gaussian tone burst as
% upper_tG:

lower_tG = - (4 .* sigma);

upper_tG = (4 .* sigma);

% Compute the amplitude of the Gaussian tone burst
[ G, time ] = comp_Gaussian_tone_burst(upper_tG,lower_tG,dt,sigma,f_0 );

% Define the length of G
NumG = length(G);

% Transform the G into a 4D array

G4d = reshape(G,[1,1,1,NumG]);

% Perform the convolution operation with matching dimensions of s_conver
% and total_p, central part of the convolution will be same size as 
% pressure.
s_conver = convn(total_p,G4d,'same');


% ******** Plot of Gaussian tone burtst along the line source: ********

% Divide the figure into an 2-by-2 grid and creates axes in the position
% specified by 2.
subplot(2,2,2);

% Plot the the response to a Gaussian tone burst with a time up to inx,
% and x is (-3:10e-3:3)mm and y is (-3:10e-3:3)mm
imagesc(x*1000,y*1000,s_conver(:,:,1,inx));

%Adjust the xyz ratio
daspect([Numx,Numy,Numz]);

% Set up the colormap
colormap hot;

colorbar;

caxis([-60,60]);

% label the x-axis
xlabel('x [mm]');

% label the y-axis
ylabel('y [mm]');

% giving a title on the figure
title('Field generated by Gaussian tone burst.');


% ******** Error checking and finish timing: ********

%stop the code and indicate the error
dbstop if error;

%Finish timing and display the running time
fprintf('The total running time of Task6_script is: %.6f seconds. \n',toc');