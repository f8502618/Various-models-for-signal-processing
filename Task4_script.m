% ******** Start timing and clear space: ********

% Starts timing
tic;

% Clear all contents from command window
clc;

% Clear all variables from workspace
clear;

% Close all figures
close all;


% ******** Computationcof S(f) and f: ********

% Import functions and results from Task3_script.
Task3_script;

% Compute modulus of the discrete Fourier transform of the pressure
% generated by an excitation signal of finite temporal duration, which is
% the amplitude spectrum, S(f)
s_amplitude = abs(fft(s_excited));

% Define sampling frequency
sampling_f = 1/dt;

% As the amplitude spectra for positive frequencies is interested, so we
% are interested in the spectra length corresponding to posive frequencies.
% postive_S returns the values of the amplitude spectra for positive
% frequencies. f returns the frequencies 2ithin the length we interested.
L_s = length(s_amplitude);

positive_S = s_amplitude(1:L_s/2);

f = sampling_f *(0:L_s/2-1)/L_s;

% ******** Ploting Amplitude spectrum at: f0 = 10 MHz,sigma = 50ns ********

% Plot the Amplitude spectrum against f in unit of MHz
figure(1)

plot(f*1e-06, positive_S);

xlabel('Frequency[MHz]');

ylabel('Modulus of FFT');

title('Amplitude spectrum of Gaussian tone burst: f0 = 10 MHz,sigma = 50ns');


% ******** Ploting Amplitude spectrums with 6 different pairs of f0 and
% sigma********

% sigma is the standard deviation (in seconds) of the Gaussian envelope
% given by exp((-(t.^2)./(exp((-2*t^2)/(2*(sigma^2)))))), where it
% determines the width in time of the tone burst.Unit: [s]

% We define the standard deviation sigma as below and generate 6 linear
% spaced vectors within 5 <= sigma_value <= 500 ns.
lowsigma =  5.0000e-09;

highsigma = 5.0000e-07;

% f_0 is the centre frequency which is a measure of a central frequency
% between the upper and lower cutoff frequencies, with a unit, [Hz].

% We define the centre frequency, f_0, as below,
lowf_0 = 2.0000e06;

highf_0 = 4.0000e07;

% Define the number of pairs we want to plot
count = 6;

% Compute arrays of sigma values and f0 values
[sigma_new,f_0new] = meshgrid(linspace(lowsigma,highsigma,count),linspace(lowf_0,highf_0,count));

% Returns 6 different sigma values
sigma_value = unique(sigma_new);

% Return 6 different f0 values
f_0value = unique(f_0new);

% Define the lower time limit of the Gaussian tone burst
lower_ti = - (4 .* sigma_value);

% upper time limit
upper_ti = (4 .* sigma_value);

% Number of the time steps for the last pair
Num = (upper_ti(count)-lower_ti(count))/dt + 1;

% Preallocate storage
Time = zeros(count, Num);

Numtn = zeros(1,count);

exp_de = zeros(1,count);

exp_part1 = zeros(1,count);

G_envelop = zeros(count, Num);

sin_part = zeros(count, Num);

s_excited = zeros(count, L_s);

s_amplitudei = zeros(count, L_s);

positive_Si = zeros(count, (L_s-1)/2);

for i = 1:count
    
    Numtn(i) = length(lower_ti(i):dt:upper_ti(i));
    
    Time(i,1:Numtn(i)) = lower_ti(i):dt:upper_ti(i);
    
    % calculate the denominator part in the exponential formula
    exp_de(i) = 2 .*(sigma_value(i).^2);
    
    % add eps to avoid exp_de yielding "not a number" (nan):
    exp_part1(i) = exp_de(i) + eps;
    
    % Calculate the exponential part of the Gaussian tone burst,Gaussian
    % Envelop
    G_envelop(i,1:Numtn(i)) = exp((-(Time(i,1:Numtn(i)).^2)./(exp_part1(i))));
    
    % Calculate the sine part of the Gaussian tone burst
    sin_part(i,1:Numtn(i)) = sin( 2 .* (pi + eps) .* f_0value(i) .* Time(i,1:Numtn(i)));
    
    % Compute the Gaussian tone burst
    G(i,1:Numtn(i)) = G_envelop(i,1:Numtn(i)) .* sin_part(i,1:Numtn(i));
    
    % Perform the convolution operation
    s_excited(i,:) = conv( pressure_n,G(i,:),'same');
    
    % Compute the modulus of amplitude spectra
    s_amplitudei(i,:) = abs(fft(s_excited(i,:)));
    
    % Obtain the spectra for positive frequencies
    positive_Si(i,:) = s_amplitudei(i,1:L_s/2);
    
    figure(2);
    
    subplot(3,2,i);
    
    plot(f*1e-06, positive_Si(i,:));
    
    xlabel('Frequency [MHz]');
    
    ylabel('Modulus of FFT');
    
    title(['Plot',num2str(i),' sigma= ',num2str(sigma_value(i)*1.0000e+09),'ns f0=',num2str(f_0value(i)/1000000),'MHz'])
end

% Stop when the error occurs
dbstop if error

% Finishing timing and tell the user the time
fprintf('The total running time of Task4_script is: %.6f seconds. \n',toc');


% ******** Question: *********

% What happens to the amplitude spectrum if you increase or decrease f0,
% and what happens when you increase or decrease sigma?
%
% when f0 increases while keep sigma constant
% , the amplitude spectrum is shifted along the frequency axis in the
% positive frequency direction. When sigma increases, the amplitude
% spectrum becomes narrower, there is a reduction in the width of the
% spectrum and increase the height of the peak.

